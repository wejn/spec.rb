! Spec.rb documentation
= Character escaping
You won't do much with special chars here: <>!@#$%^&*()_+[]\

= Paragraphs
Each paragraph is separated by blank line.

So this is second one.

= Heading
Each heading is denoted by one or more '=' at the very beginning of line.

== So this is second level heading
Not surprising, huh?

= Lists:
Besides the free-form text you can have lists. Either unnumbered (ul):

* one
* two
* three

or definition:

: HTML = HyperText Mark-up Language
: CSS = Cascading Style Sheets
: HTTP = HyperText Transfer Protocol

= Code blocks
Another possibility is to have code blocks:
{{{
while(1){
	printf("I am code, you know?\n");
}
}}}

Good thing on code block is, it behaves like "verbatim" in TeX and the
delimiters were selected to auto-fold in "vim".

= Non-breakable spaces
All occurences of tilde:
{{{
~
}}}
will result in translation to non-breaking space: &nbsp;

= URLs
You can also specify URLs. Either:
{{{
Ruby<http://ruby-lang.org/>
}}}
which will be: Ruby<http://ruby-lang.org/> or:
{{{
"Ruby on Rails"<http://rubyonrails.org/>
}}}
which will end up: "Ruby on Rails"<http://rubyonrails.org/>.

Supported schemes are (for now): http, ftp, mailto, news, irc.

Also supported is "relative link"<REL:spec.txt> scheme.

= Auto-TOC
Of course the system has automatically generated TOC, whose items are
pointing to appropriate headings in the spec.

= Alternative layout
By default there's hardcoded layout at the end of spec.rb ... which
is sometimes undesirable. You can specify alternative layout in two ways:
* by placing global layout file with name "layout.spec" in same dir as source
* by placing local (per-file) layout file with name "input.lsp" for "input.ext" file

Layout can contain normal HTML/XHTML markup with special tags in form: {{{{TAG_NAME}}}}.

Allowed/supported tag names are:
: CONTENT = Content of the spec file (final markup)
: TOC = Table of contents, including heading
: TOC_NO_HEADING = Table of contents, excluding heading
: TITLE = Title of the document
: NOW = Timestamp created by Time.now.to_s
: NOW_NUMERIC = Timestamp in form: "YYYY-MM-DD HH:MM:SS" (MySQL datetime format)
: FILENAME = Input filename

= That's it.
Not much, but for writing specs it's sufficient, IMHO.

Oh, and the HTML code should validate, IMHO.
